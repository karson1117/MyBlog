[{"title":"hexo自动部署至VPS","date":"2017-03-03T06:14:15.000Z","path":"2017/03/03/webhook/","text":"之前每次写好一篇博文后，都是傻傻的打包利用Xftp手动传至VPS中。简直就是一个字“low~”。自从利用webhook实现自动部署后，腰不酸了，腿不疼了，可以扛两袋米一口气上五楼了~o(￣▽￣)o~ (小装一波~)。 最终实现：自己电脑上新建文章后，hexo clean &amp;&amp; hexo g -d 即可。实现原理：1.hexo 提交代码渲染后文件至远程仓库(coding)2.coding中对应项目配置webhook发送执行请求3.vps 接收指定请求执行脚本(拉取最新代码) 操作分为本机上和vps上的操作。 hexo本地配置及部署 hexo是基于nodejs开发的，npm是nodejs的包管理工具git用于部署代码所以首页应确认本机环境：git，node.js环境git,node.js安装可另查资料 12345678910#安装hexo命令行工具npm install hexo-cli -g#创建blog目录，并初始化hexo项目hexo init blogcd bloghexo new \"My First Post\"#生成相关静态文件hexo g#启动本地服务，查看效果（http://localhost:4000）hexo server hexo的git配置，hexo根目录下_config.yml文件中1234deploy: type: git message: update repo: git@git.coding.net:letra/hexo.git 12#代码部署hexo deploy如果正确，然后在你的远程Git仓库中就有了hexo项目的相关文件了重点来了！！！ 远程仓库配置WebHooks这张图的配置的意思是：当仓库发生push的时候，会发送一个请求到http://imlianer.com/webhooks/push/123456。 为了服务端的简易处理，这里没有使用token，而是将url地址当做token，123456就充当了token的角色。 到这，仓库这边的配置就完成了，接下来的问题就是服务器如何接收这个请求并重新部署hexo了。 VPS相关配置在hexo目录中新建webhook.js,内容如下：12345678910var http = require('http')var exec = require('child_process').exechttp.createServer(function (req, res) &#123;#该路径与WebHooks中的路径部分需要完全匹配，实现简易的授权认证。if(req.url === '/webhooks/push/123456')&#123;#如果url匹配，表示认证通过，则执行 sh ./deploy.shexec('sh ./deploy.sh')&#125;res.end()&#125;).listen(4002)这段代码就能启动一个nodejs服务，监听4002端口。当请求过来的url完全匹配的时候，执行deploy.sh。再新建一个文件deploy.sh处理部署相关脚本，内容如下：1git pull origin master然后在服务器中启动nodejs服务监听webhooks使用PM2执行脚本PM212npm install pm2 -gpm2 start webhook.js然后可以在本机中hexo d 命令，vps就会自动更新hexo文件了…","tags":[{"name":"vps","slug":"vps","permalink":"http://karson.cc/tags/vps/"},{"name":"git","slug":"git","permalink":"http://karson.cc/tags/git/"},{"name":"webhook","slug":"webhook","permalink":"http://karson.cc/tags/webhook/"}]},{"title":"Linux下防御/减轻DDOS攻击","date":"2017-03-03T05:30:03.000Z","path":"2017/03/03/ddos/","text":"好久没管我的vps了，直到前天发现vpn居然用不了了，一脸懵逼。登录后台就发现可能是被攻击了，导致被官方限制使用。被莫名的攻击后也是张二和尚摸不着头脑。还能咋办叻?Goole~&amp;Baidu~然后就开始了如下操作，也不知有没有用，O(∩_∩)O哈哈~ DDoS deflate介绍 DDoS deflate是一款免费的用来防御和减轻DDoS攻击的脚本。它通过&gt;netstat监测跟踪创建大量网络连接的IP地址，在检测到某个结点超过预设的限 制时，该程序会通过APF或IPTABLES禁止或阻挡这些IP. 如何确认是否受到DDOS攻击？由于我是直接重装了系统，所以这一步仅供参考1netstat -ntu | awk '&#123;print $5&#125;' | cut -d: -f1 | sort | uniq -c | sort -n 据说：执行后，将会显示服务器上所有的每个IP多少个连接数。 1.安装DDoS deflate123wget http://www.inetbase.com/scripts/ddos/install.sh //下载DDoS deflatechmod 0700 install.sh //添加权限./install.sh //执行 2.配置DDoS deflateDDoS deflate的默认配置位于/usr/local/ddos/ddos.conf内容如下 查看/usr/local/ddos/ddos.sh文件的第117行(vim模式下 跳转命令：行号 即可)1netstat -ntu | awk ‘&#123;print $5&#125;’ | cut -d: -f1 | sort | uniq -c | sort -nr &gt; $BAD_IP_LIST修改为以下代码即可！1netstat -ntu | awk ‘&#123;print $5&#125;’ | cut -d: -f1 | sed -n ‘/[0-9]/p’ | sort | uniq -c | sort -nr &gt; $BAD_IP_LIST","tags":[{"name":"vps","slug":"vps","permalink":"http://karson.cc/tags/vps/"},{"name":"ddos","slug":"ddos","permalink":"http://karson.cc/tags/ddos/"}]},{"title":"VPS安装及配置nginx","date":"2017-01-04T05:43:14.000Z","path":"2017/01/04/vps-install-nginx/","text":"反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。 环境确认系统环境：Centos 6安装方式：源码编译安装 几种Linux软件的安装方法安装位置：/usr/local/nginx 安装前提在安装nginx前，需要确保系统安装了g++、gcc、openssl-devel、pcre-devel和zlib-devel软件。 开始安装进入安装目录1cd /usr/local/src 安装pcre(用于Nginx的HTTP Rewrite 模块) 注：若使用wget方式下载安装包可能会出现地址变更导致下载失败。另一种方式：xftp可进行文件传输，本地下载好安装包后，利用xftp传输即可。 1234567cd /usr/local/src wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.38.tar.gz tar -zxvf pcre-8.38.tar.gz #解压文件mv pcre-8.38 pcre #修改解压后文件夹名称cd pcre./configure #准备编译make &amp; make install #编译及安装 安装zilb(一个压缩和解压模块)1234567cd /usr/local/srcwget http://zlib.net/zlib-1.2.8.tar.gztar -zxvf zlib-1.2.8.tar.gzmv zlib-1.2.8 zlibcd zlib./configuremake &amp; make install 安装SSl模块 openssl是为网络通信提供安全及数据完整性的一种安全协议，囊括了主要的密码算法、常用的密钥和证书封装管理功能以及SSL协议，并提供了丰富的应用程序供测试或其它目的使用。 123456cd /usr/local/srcwget http://www.openssl.org/source/openssl-1.0.1c.tar.gztar -zxvf openssl-1.0.1c.tar.gzmv openssl-1.0.1c openssl./configmake &amp; make install 安装Nginx123456789101112131415161718cd /usr/local/srcwget http://nginx.org/download/nginx-1.9.9.tar.gztar -zxvf nginx-1.9.9.tar.gzcd nginx-1.9.9./configure --sbin-path=/usr/local/nginx \\--conf-path=/usr/local/nginx/nginx.conf \\--pid-path=/usr/local/nginx/nginx.pid \\--with-http_ssl_module \\--with-http_v2_module \\--with-pcre=/usr/local/src/pcre \\--with-zlib=/usr/local/src/zlib \\--with-openssl=/usr/local/src/opensslmake &amp; make installcd /usr/local/nginx #进入nginx目录nginx #启动nginx 启动后浏览器导航到http://IP 就可以看到默认的欢迎界面了 Nginx常用命令1234nginx -s stop停止nginxnginx 运行nginxnginx -s reload 重启nginxnginx -t 测试nginx nginx加入到环境变量1vim /etc/profile 尾行添加12PATH=$PATH:/usr/local/nginx #nginx安装目录export PATH 保存关闭后运行1source /etc/profile 修改网站默认根目录路径 网站默认根目录放在/usr/local/nginx/html 1vim /usr/local/nginx/conf/nginx.conf 1234567891011121314server &#123; listen 80; server_name 你的IP; #charset koi8-r; #access_log logs/host.access.log main; location / &#123; root /www/blog/public; index index.html index.htm; &#125; . . .&#125; root添加自己想要的根目录，重启nginx生效。","tags":[{"name":"nginx","slug":"nginx","permalink":"http://karson.cc/tags/nginx/"}]},{"title":"VPS搭建多端口VPN","date":"2016-12-20T08:37:45.000Z","path":"2016/12/20/vps/","text":"为了防止世界被破坏，为了守护世界的和平!贯彻爱与真实的邪恶，可爱又迷人的反派角色!世界辣么大~还不去看看！ 所需1.他乡vps一台2.xshell用于远程登录3.shadowsocks应用程序。点这里 Ready.1.本人装备的是搬瓦工的vps,好处是可以无限制的重装系统。2.购买VPS3.打开xshell连接 GO！！1.安装所需组件123yum install m2crypto python-setuptoolseasy_install pippip install shadowsocks 2.新建配置文件：shadowsocks.json12345678910111213&#123; \"server\":\"23.105.215.43\", #你服务器的ip \"local_address\":\"127.0.0.1\", \"local_port\":1080, \"port_password\":&#123; #端口以及对应的密码 \"9000\":\"password\", \"9001\":\"password\", \"9002\":\"password\" &#125;, \"timeout\":300, \"method\":\"rc4-md5\", #选择的加密方式 \"fast_open\": false&#125;3添加123ssserver -c /etc/shadowsocks.jsonssserver -c /etc/shadowsocks.json -d start #后台运行4.开启shadowsocks应用程序，输入ip,端口号,密码。就OK啦~5.Android用户想要连接本文配置的vpn,请搜下图app.","tags":[{"name":"vps","slug":"vps","permalink":"http://karson.cc/tags/vps/"},{"name":"vpn","slug":"vpn","permalink":"http://karson.cc/tags/vpn/"}]}]